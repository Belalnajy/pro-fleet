generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String             @id @default(cuid())
  email                String             @unique
  name                 String
  phone                String?
  password             String
  role                 UserRole
  isActive             Boolean            @default(true)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  accountantProfile    Accountant?
  customerProfile      Customer?
  customsBrokerProfile CustomsBroker?
  customsClearances    CustomsClearance[]
  driverProfile        Driver?
  notifications        Notification[]
  subscriptions        Subscription[]
  customerTrips        Trip[]             @relation("CustomerTrips")

  @@map("users")
}

model Driver {
  id              String              @id @default(cuid())
  userId          String              @unique
  nationality     String
  carPlateNumber  String
  carRegistration String
  licenseExpiry   DateTime
  isAvailable     Boolean             @default(true)
  currentLocation String?
  trackingEnabled Boolean             @default(false)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  vehicleTypes    DriverVehicleType[]
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  tripRequests    TripRequest[]
  trips           Trip[]

  @@map("drivers")
}

model Customer {
  id             String         @id @default(cuid())
  userId         String         @unique
  companyName    String?
  address        String?
  preferredLang  String         @default("en")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  savedAddresses SavedAddress[]
  subscriptions  Subscription[]

  @@map("customers")
}

model Accountant {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accountants")
}

model CustomsBroker {
  id                String                    @id @default(cuid())
  userId            String                    @unique
  licenseNumber     String?
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  user              User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  clearanceInvoices CustomsClearanceInvoice[]
  trips             Trip[]

  @@map("customs_brokers")
}

model Vehicle {
  id            String           @id @default(cuid())
  isActive      Boolean          @default(true)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  vehicleTypeId String
  vehicleNumber String?
  pricing       Pricing[]
  trips         Trip[]
  vehicleType   VehicleTypeModel @relation(fields: [vehicleTypeId], references: [id])

  @@unique([vehicleTypeId, vehicleNumber], name: "type_vehicle_number")
  @@map("vehicles")
}

model City {
  id             String         @id @default(cuid())
  name           String
  nameAr         String?
  country        String
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  latitude       Float?
  longitude      Float?
  pricingFrom    Pricing[]      @relation("PricingFrom")
  pricingTo      Pricing[]      @relation("PricingTo")
  savedAddresses SavedAddress[]
  tripsFrom      Trip[]         @relation("TripsFrom")
  tripsTo        Trip[]         @relation("TripsTo")

  @@unique([name, country])
  @@map("cities")
}

model VehicleTypeModel {
  id                   String              @id @default(cuid())
  name                 String              @unique
  nameAr               String?
  capacity             String?
  description          String?
  isRefrigerated       Boolean             @default(false)
  defaultTemperatureId String?
  isActive             Boolean             @default(true)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  drivers              DriverVehicleType[]
  vehicles             Vehicle[]

  @@map("vehicle_type_models")
}

model Pricing {
  id         String   @id @default(cuid())
  fromCityId String
  toCityId   String
  vehicleId  String
  quantity   Int      @default(1)
  price      Float
  currency   String   @default("SAR")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  fromCity   City     @relation("PricingFrom", fields: [fromCityId], references: [id])
  toCity     City     @relation("PricingTo", fields: [toCityId], references: [id])
  vehicle    Vehicle  @relation(fields: [vehicleId], references: [id])

  @@unique([fromCityId, toCityId, vehicleId])
  @@map("pricing")
}

model TemperatureSetting {
  id        String            @id @default(cuid())
  option    TemperatureOption
  value     Float
  unit      String            @default("Â°C")
  isActive  Boolean           @default(true)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  trips     Trip[]

  @@map("temperature_settings")
}

model Trip {
  id              String             @id @default(cuid())
  tripNumber      String             @unique
  customerId      String
  driverId        String?
  vehicleId       String
  fromCityId      String
  toCityId        String
  temperatureId   String
  scheduledDate   DateTime
  actualStartDate DateTime?
  deliveredDate   DateTime?
  status          TripStatus         @default(PENDING)
  price           Float
  currency        String             @default("SAR")
  notes           String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  customsBrokerId String?
  arrivedDestAt   DateTime?
  arrivedPickupAt DateTime?
  assignedAt      DateTime?
  deliveredAt     DateTime?
  destinationLat  Float?
  destinationLng  Float?
  enRoutePickupAt DateTime?
  inTransitAt     DateTime?
  originLat       Float?
  originLng       Float?
  pickedUpAt      DateTime?
  invoice         Invoice?
  trackingLogs    TrackingLog[]
  tripRequests    TripRequest[]
  customer        User               @relation("CustomerTrips", fields: [customerId], references: [id])
  customsBroker   CustomsBroker?     @relation(fields: [customsBrokerId], references: [id])
  driver          Driver?            @relation(fields: [driverId], references: [id])
  fromCity        City               @relation("TripsFrom", fields: [fromCityId], references: [id])
  temperature     TemperatureSetting @relation(fields: [temperatureId], references: [id])
  toCity          City               @relation("TripsTo", fields: [toCityId], references: [id])
  vehicle         Vehicle            @relation(fields: [vehicleId], references: [id])

  @@map("trips")
}

model Invoice {
  id                  String             @id @default(cuid())
  invoiceNumber       String             @unique
  tripId              String?            @unique
  taxRate             Float              @default(0.15)
  taxAmount           Float
  subtotal            Float
  total               Float
  currency            String             @default("SAR")
  paymentStatus       PaymentStatus      @default(PENDING)
  dueDate             DateTime
  paidDate            DateTime?
  notes               String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  amountPaid          Float              @default(0)
  installmentAmount   Float?
  installmentCount    Int?
  installmentsPaid    Int                @default(0)
  nextInstallmentDate DateTime?
  remainingAmount     Float              @default(0)
  customerEmail       String?
  customerId          String?
  customerName        String?
  customsClearances   CustomsClearance[]
  trip                Trip?              @relation(fields: [tripId], references: [id], onDelete: Cascade)
  payments            Payment[]

  @@map("invoices")
}

model CustomsClearanceInvoice {
  id                  String             @id @default(cuid())
  invoiceNumber       String             @unique
  clearanceId         String             @unique
  customsBrokerId     String
  customsFee          Float              @default(0)
  additionalFees      Float              @default(0)
  subtotal            Float
  taxRate             Float              @default(0.15)
  taxAmount           Float
  total               Float
  currency            String             @default("SAR")
  paymentStatus       PaymentStatus      @default(PENDING)
  dueDate             DateTime
  paidDate            DateTime?
  amountPaid          Float              @default(0)
  remainingAmount     Float              @default(0)
  installmentCount    Int?
  installmentsPaid    Int                @default(0)
  nextInstallmentDate DateTime?
  installmentAmount   Float?
  notes               String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  payments            ClearancePayment[]
  clearance           CustomsClearance   @relation(fields: [clearanceId], references: [id], onDelete: Cascade)
  customsBroker       CustomsBroker      @relation(fields: [customsBrokerId], references: [id])

  @@map("customs_clearance_invoices")
}

model Payment {
  id            String   @id @default(cuid())
  invoiceId     String
  amount        Float
  paymentMethod String?
  paymentDate   DateTime @default(now())
  reference     String?
  notes         String?
  createdBy     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  invoice       Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model ClearancePayment {
  id            String                  @id @default(cuid())
  invoiceId     String
  amount        Float
  paymentMethod String?
  paymentDate   DateTime                @default(now())
  reference     String?
  notes         String?
  createdBy     String?
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  invoice       CustomsClearanceInvoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("clearance_payments")
}

model SubscriptionPlan {
  id            String           @id @default(cuid())
  name          String
  description   String
  type          SubscriptionType
  price         Float
  currency      String           @default("SAR")
  duration      Int
  tripsIncluded Int?
  discountRule  String?
  isActive      Boolean          @default(true)
  specialOffer  String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  subscriptions Subscription[]

  @@map("subscription_plans")
}

model Subscription {
  id         String           @id @default(cuid())
  userId     String
  planId     String
  customerId String
  startDate  DateTime
  endDate    DateTime
  isActive   Boolean          @default(true)
  autoRenew  Boolean          @default(false)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  customer   Customer         @relation(fields: [customerId], references: [id])
  plan       SubscriptionPlan @relation(fields: [planId], references: [id])
  user       User             @relation(fields: [userId], references: [id])

  @@map("subscriptions")
}

model SystemSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}

model CancellationPolicy {
  id                        String   @id @default(cuid())
  freeCancellationHours     Int      @default(24)
  cancellationFeePercentage Float    @default(0.10)
  isActive                  Boolean  @default(true)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  @@map("cancellation_policies")
}

model TrackingLog {
  id        String   @id @default(cuid())
  tripId    String
  driverId  String
  latitude  Float
  longitude Float
  timestamp DateTime @default(now())
  speed     Float?
  heading   Float?
  createdAt DateTime @default(now())
  notes     String?
  trip      Trip     @relation(fields: [tripId], references: [id])

  @@map("tracking_logs")
}

model Report {
  id          String   @id @default(cuid())
  type        String
  title       String
  data        String
  generatedBy String
  generatedAt DateTime @default(now())
  createdAt   DateTime @default(now())

  @@map("reports")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("password_reset_tokens")
}

model SavedAddress {
  id         String   @id @default(cuid())
  customerId String
  label      String
  address    String
  latitude   Float?
  longitude  Float?
  cityId     String?
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  city       City?    @relation(fields: [cityId], references: [id])
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("saved_addresses")
}

model CustomsClearance {
  id                       String                   @id @default(cuid())
  clearanceNumber          String                   @unique
  invoiceId                String
  customsBrokerId          String
  status                   ClearanceStatus          @default(PENDING)
  customsFee               Float                    @default(0)
  additionalFees           Float                    @default(0)
  totalFees                Float                    @default(0)
  estimatedCompletionDate  DateTime?
  actualCompletionDate     DateTime?
  notes                    String?
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt
  additionalFeesPercentage Float                    @default(0)
  additionalFeesType       String                   @default("FIXED")
  customsFeePercentage     Float                    @default(0)
  customsFeeType           String                   @default("FIXED")
  clearanceInvoice         CustomsClearanceInvoice?
  customsBroker            User                     @relation(fields: [customsBrokerId], references: [id])
  invoice                  Invoice                  @relation(fields: [invoiceId], references: [id])
  documents                CustomsDocument[]

  @@map("customs_clearances")
}

model CustomsDocument {
  id           String           @id @default(cuid())
  clearanceId  String
  documentType DocumentType
  documentName String
  filePath     String
  fileSize     Int
  mimeType     String
  status       DocumentStatus   @default(PENDING)
  uploadedAt   DateTime         @default(now())
  reviewedAt   DateTime?
  reviewedBy   String?
  notes        String?
  clearance    CustomsClearance @relation(fields: [clearanceId], references: [id], onDelete: Cascade)

  @@map("customs_documents")
}

model CustomsTariff {
  id             String   @id @default(cuid())
  hsCode         String   @unique
  description    String
  descriptionAr  String
  dutyRate       Float
  vatRate        Float
  additionalFees Float    @default(0)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  category       String?  @default("other")

  @@map("customs_tariffs")
}

model DriverVehicleType {
  id            String           @id @default(cuid())
  driverId      String
  vehicleTypeId String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  driver        Driver           @relation(fields: [driverId], references: [id], onDelete: Cascade)
  vehicleType   VehicleTypeModel @relation(fields: [vehicleTypeId], references: [id], onDelete: Cascade)

  @@unique([driverId, vehicleTypeId])
  @@map("driver_vehicle_types")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model TripRequest {
  id          String            @id @default(cuid())
  tripId      String
  driverId    String
  status      TripRequestStatus @default(PENDING)
  requestedAt DateTime          @default(now())
  respondedAt DateTime?
  expiresAt   DateTime
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  driver      Driver            @relation(fields: [driverId], references: [id], onDelete: Cascade)
  trip        Trip              @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@unique([tripId, driverId])
  @@map("trip_requests")
}

enum UserRole {
  ADMIN
  DRIVER
  CUSTOMER
  ACCOUNTANT
  CUSTOMS_BROKER
}

enum TripStatus {
  PENDING
  IN_PROGRESS
  DELIVERED
  CANCELLED
  ASSIGNED
  EN_ROUTE_PICKUP
  AT_PICKUP
  PICKED_UP
  IN_TRANSIT
  AT_DESTINATION
  DRIVER_REQUESTED
  DRIVER_ACCEPTED
  DRIVER_REJECTED
}

enum TemperatureOption {
  PLUS_2
  PLUS_10
  MINUS_18
  AMBIENT
  CUSTOM
}

enum SubscriptionType {
  INDIVIDUAL
  COMPANY
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
  SENT
  PARTIAL
  INSTALLMENT
}

enum ClearanceStatus {
  PENDING
  IN_REVIEW
  APPROVED
  REJECTED
  COMPLETED
}

enum DocumentStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  EXPIRED
}

enum DocumentType {
  BILL_OF_LADING
  COMMERCIAL_INVOICE
  PACKING_LIST
  CERTIFICATE_OF_ORIGIN
  IMPORT_LICENSE
  CUSTOMS_DECLARATION
  INSURANCE_CERTIFICATE
  OTHER
}

enum NotificationType {
  TRIP_STATUS_UPDATE
  TRIP_ASSIGNED
  TRIP_CANCELLED
  INVOICE_CREATED
  INVOICE_PAID
  PAYMENT_RECEIVED
  DRIVER_ASSIGNED
  DRIVER_ACCEPTED
  DRIVER_REJECTED
  SYSTEM_ANNOUNCEMENT
  CUSTOMS_UPDATE
  TRIP_REQUEST_RECEIVED
  TRIP_REQUEST_EXPIRED
}

enum TripRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}
