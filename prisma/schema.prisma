generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String         @id @default(cuid())
  email                String         @unique
  name                 String
  phone                String?
  password             String
  role                 UserRole
  isActive             Boolean        @default(true)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  accountantProfile    Accountant?
  customerProfile      Customer?
  customsBrokerProfile CustomsBroker?
  driverProfile        Driver?
  subscriptions        Subscription[]
  customerTrips        Trip[]         @relation("CustomerTrips")
  customsClearances    CustomsClearance[]

  @@map("users")
}

model Driver {
  id              String   @id @default(cuid())
  userId          String   @unique
  nationality     String
  carPlateNumber  String
  carRegistration String
  licenseExpiry   DateTime
  isAvailable     Boolean  @default(true)
  currentLocation String?
  trackingEnabled Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  trips           Trip[]

  @@map("drivers")
}

model Customer {
  id            String         @id @default(cuid())
  userId        String         @unique
  companyName   String?
  address       String?
  preferredLang String         @default("en")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptions Subscription[]
  savedAddresses SavedAddress[]

  @@map("customers")
}

model Accountant {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accountants")
}

model CustomsBroker {
  id            String    @id @default(cuid())
  userId        String    @unique
  licenseNumber String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices      Invoice[]
  trips         Trip[]

  @@map("customs_brokers")
}

model Vehicle {
  id            String           @id @default(cuid())
  vehicleNumber String?
  isActive      Boolean          @default(true)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  vehicleTypeId String
  pricing       Pricing[]
  trips         Trip[]
  vehicleType   VehicleTypeModel @relation(fields: [vehicleTypeId], references: [id])

  @@unique([vehicleTypeId, vehicleNumber], name: "type_vehicle_number")
  @@map("vehicles")
}

model City {
  id          String    @id @default(cuid())
  name        String
  nameAr      String?
  country     String
  latitude    Float?
  longitude   Float?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  pricingFrom Pricing[] @relation("PricingFrom")
  pricingTo   Pricing[] @relation("PricingTo")
  tripsFrom   Trip[]    @relation("TripsFrom")
  tripsTo     Trip[]    @relation("TripsTo")
  savedAddresses SavedAddress[]

  @@unique([name, country])
  @@map("cities")
}

model VehicleTypeModel {
  id                   String    @id @default(cuid())
  name                 String    @unique
  nameAr               String?
  capacity             String?
  description          String?
  isRefrigerated       Boolean   @default(false)
  defaultTemperatureId String?
  isActive             Boolean   @default(true)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  vehicles             Vehicle[]

  @@map("vehicle_type_models")
}

model Pricing {
  id         String   @id @default(cuid())
  fromCityId String
  toCityId   String
  vehicleId  String
  quantity   Int      @default(1)
  price      Float
  currency   String   @default("SAR")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  fromCity   City     @relation("PricingFrom", fields: [fromCityId], references: [id])
  toCity     City     @relation("PricingTo", fields: [toCityId], references: [id])
  vehicle    Vehicle  @relation(fields: [vehicleId], references: [id])

  @@unique([fromCityId, toCityId, vehicleId])
  @@map("pricing")
}

model TemperatureSetting {
  id        String            @id @default(cuid())
  option    TemperatureOption
  value     Float
  unit      String            @default("Â°C")
  isActive  Boolean           @default(true)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  trips     Trip[]

  @@map("temperature_settings")
}

model Trip {
  id              String             @id @default(cuid())
  tripNumber      String             @unique
  customerId      String
  driverId        String?
  vehicleId       String
  fromCityId      String
  toCityId        String
  temperatureId   String
  customsBrokerId String?
  scheduledDate   DateTime
  actualStartDate DateTime?
  deliveredDate   DateTime?
  status          TripStatus         @default(PENDING)
  // Trip stage timestamps
  assignedAt      DateTime?
  enRoutePickupAt DateTime?
  arrivedPickupAt DateTime?
  pickedUpAt      DateTime?
  inTransitAt     DateTime?
  arrivedDestAt   DateTime?
  deliveredAt     DateTime?
  price           Float
  currency        String             @default("SAR")
  notes           String?
  // Custom coordinates for map-selected locations
  originLat       Float?
  originLng       Float?
  destinationLat  Float?
  destinationLng  Float?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  invoice         Invoice?
  trackingLogs    TrackingLog[]
  customer        User               @relation("CustomerTrips", fields: [customerId], references: [id])
  driver          Driver?            @relation(fields: [driverId], references: [id])
  fromCity        City               @relation("TripsFrom", fields: [fromCityId], references: [id])
  temperature     TemperatureSetting @relation(fields: [temperatureId], references: [id])
  toCity          City               @relation("TripsTo", fields: [toCityId], references: [id])
  vehicle         Vehicle            @relation(fields: [vehicleId], references: [id])
  customsBroker   CustomsBroker?     @relation(fields: [customsBrokerId], references: [id])

  @@map("trips")
}

model Invoice {
  id              String         @id @default(cuid())
  invoiceNumber   String         @unique
  tripId          String?        @unique
  customsBrokerId String?
  customsFee      Float          @default(0)
  taxRate         Float          @default(0.15)
  taxAmount       Float
  subtotal        Float
  total           Float
  currency        String         @default("SAR")
  paymentStatus   PaymentStatus  @default(PENDING)
  dueDate         DateTime
  paidDate        DateTime?
  notes           String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  customsBroker   CustomsBroker? @relation(fields: [customsBrokerId], references: [id])
  trip            Trip?          @relation(fields: [tripId], references: [id], onDelete: Cascade)
  customsClearances CustomsClearance[]

  @@map("invoices")
}

model SubscriptionPlan {
  id            String           @id @default(cuid())
  name          String
  description   String
  type          SubscriptionType
  price         Float
  currency      String           @default("SAR")
  duration      Int
  tripsIncluded Int?
  discountRule  String?
  isActive      Boolean          @default(true)
  specialOffer  String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  subscriptions Subscription[]

  @@map("subscription_plans")
}

model Subscription {
  id         String           @id @default(cuid())
  userId     String
  planId     String
  customerId String
  startDate  DateTime
  endDate    DateTime
  isActive   Boolean          @default(true)
  autoRenew  Boolean          @default(false)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  customer   Customer         @relation(fields: [customerId], references: [id])
  plan       SubscriptionPlan @relation(fields: [planId], references: [id])
  user       User             @relation(fields: [userId], references: [id])

  @@map("subscriptions")
}

model SystemSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}

model CancellationPolicy {
  id                        String   @id @default(cuid())
  freeCancellationHours     Int      @default(24)
  cancellationFeePercentage Float    @default(0.10)
  isActive                  Boolean  @default(true)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  @@map("cancellation_policies")
}

model TrackingLog {
  id        String   @id @default(cuid())
  tripId    String
  driverId  String
  latitude  Float
  longitude Float
  timestamp DateTime @default(now())
  speed     Float?
  heading   Float?
  notes     String?
  createdAt DateTime @default(now())
  trip      Trip     @relation(fields: [tripId], references: [id])

  @@map("tracking_logs")
}

model Report {
  id          String   @id @default(cuid())
  type        String
  title       String
  data        String
  generatedBy String
  generatedAt DateTime @default(now())
  createdAt   DateTime @default(now())

  @@map("reports")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("password_reset_tokens")
}

model SavedAddress {
  id          String   @id @default(cuid())
  customerId  String
  label       String   // e.g., "Home", "Office", "Warehouse"
  address     String
  latitude    Float?
  longitude   Float?
  cityId      String?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  city        City?    @relation(fields: [cityId], references: [id])

  @@map("saved_addresses")
}

model CustomsClearance {
  id                      String            @id @default(cuid())
  clearanceNumber         String            @unique
  invoiceId               String
  customsBrokerId         String
  status                  ClearanceStatus   @default(PENDING)
  customsFee              Float             @default(0)
  additionalFees          Float             @default(0)
  totalFees               Float             @default(0)
  estimatedCompletionDate DateTime?
  actualCompletionDate    DateTime?
  notes                   String?
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  invoice                 Invoice           @relation(fields: [invoiceId], references: [id], onDelete: Restrict)
  customsBroker           User              @relation(fields: [customsBrokerId], references: [id], onDelete: Restrict)
  documents               CustomsDocument[]

  @@map("customs_clearances")
}

model CustomsDocument {
  id           String           @id @default(cuid())
  clearanceId  String
  documentType DocumentType
  documentName String
  filePath     String
  fileSize     Int
  mimeType     String
  status       DocumentStatus   @default(PENDING)
  uploadedAt   DateTime         @default(now())
  reviewedAt   DateTime?
  reviewedBy   String?
  notes        String?
  clearance    CustomsClearance @relation(fields: [clearanceId], references: [id], onDelete: Cascade)

  @@map("customs_documents")
}

model CustomsTariff {
  id            String   @id @default(cuid())
  hsCode        String   @unique
  description   String
  descriptionAr String
  category      String?  @default("other")
  dutyRate      Float
  vatRate       Float
  additionalFees Float   @default(0)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("customs_tariffs")
}

enum UserRole {
  ADMIN
  DRIVER
  CUSTOMER
  ACCOUNTANT
  CUSTOMS_BROKER
}

enum TripStatus {
  PENDING          // ÙÙ Ø§ÙØªØ¸Ø§Ø± Ø§ÙØ¨Ø¯Ø¡
  ASSIGNED         // ØªÙ ØªØ¹ÙÙÙ Ø§ÙØ³Ø§Ø¦Ù
  IN_PROGRESS      // Ø¨Ø¯Ø£Øª Ø§ÙØ±Ø­ÙØ© (ÙÙØªÙØ§ÙÙ ÙØ¹ Ø§ÙØ¨ÙØ§ÙØ§Øª Ø§ÙÙØ¯ÙÙØ©)
  EN_ROUTE_PICKUP  // ÙÙ Ø§ÙØ·Ø±ÙÙ ÙÙÙØ·Ø© Ø§ÙØ§Ø³ØªÙØ§Ù
  AT_PICKUP        // ÙØµÙ ÙÙÙØ·Ø© Ø§ÙØ§Ø³ØªÙØ§Ù
  PICKED_UP        // ØªÙ Ø§ÙØ§Ø³ØªÙØ§Ù
  IN_TRANSIT       // ÙÙ Ø§ÙØ·Ø±ÙÙ ÙÙÙØ¬ÙØ©
  AT_DESTINATION   // ÙØµÙ ÙÙÙØ¬ÙØ©
  DELIVERED        // ØªÙ Ø§ÙØªØ³ÙÙÙ
  CANCELLED        // ÙÙØºÙØ©
}

enum TemperatureOption {
  PLUS_2
  PLUS_10
  MINUS_18
  AMBIENT
  CUSTOM
}

enum SubscriptionType {
  INDIVIDUAL
  COMPANY
}

enum PaymentStatus {
  PENDING
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum ClearanceStatus {
  PENDING
  IN_REVIEW
  APPROVED
  REJECTED
  COMPLETED
}

enum DocumentStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  EXPIRED
}

enum DocumentType {
  BILL_OF_LADING
  COMMERCIAL_INVOICE
  PACKING_LIST
  CERTIFICATE_OF_ORIGIN
  IMPORT_LICENSE
  CUSTOMS_DECLARATION
  INSURANCE_CERTIFICATE
  OTHER
}
