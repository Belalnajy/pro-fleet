const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function seedBasicPricing() {
  try {
    console.log('๐ฐ ุจุฏุก ุฅุถุงูุฉ ุงูุชุณุนูุฑ ุงูุฃุณุงุณู...')

    // ุงูุญุตูู ุนูู ุงููุฏู ูุงููุฑูุจุงุช
    const cities = await prisma.city.findMany({
      where: { isActive: true }
    })

    const vehicles = await prisma.vehicle.findMany({
      where: { isActive: true },
      include: { vehicleType: true }
    })

    if (cities.length === 0) {
      console.log('โ ูุง ุชูุฌุฏ ูุฏู ูู ุงููุธุงู. ูุฑุฌู ุชุดุบูู cleanup-cities.js ุฃููุงู')
      return
    }

    if (vehicles.length === 0) {
      console.log('โ ูุง ุชูุฌุฏ ูุฑูุจุงุช ูู ุงููุธุงู. ูุฑุฌู ุฅุถุงูุฉ ูุฑูุจุงุช ุฃููุงู')
      return
    }

    console.log(`๐ ุชู ุงูุนุซูุฑ ุนูู ${cities.length} ูุฏููุฉ`)
    console.log(`๐ ุชู ุงูุนุซูุฑ ุนูู ${vehicles.length} ูุฑูุจุฉ`)

    // ุฅูุดุงุก ุชุณุนูุฑ ุฃุณุงุณู ุจูู ุงููุฏู ุงูุฑุฆูุณูุฉ
    const mainCities = cities.filter(city => 
      ['Riyadh', 'Jeddah', 'Dammam', 'Mecca', 'Medina'].includes(city.name)
    )

    let pricingCount = 0

    for (const fromCity of mainCities) {
      for (const toCity of mainCities) {
        if (fromCity.id !== toCity.id) {
          for (const vehicle of vehicles) {
            // ุญุณุงุจ ุงููุณุงูุฉ ุงูุชูุฑูุจูุฉ (ูุจุณุท)
            const distance = calculateDistance(
              fromCity.latitude, fromCity.longitude,
              toCity.latitude, toCity.longitude
            )

            // ุญุณุงุจ ุงูุณุนุฑ ุจูุงุกู ุนูู ุงููุณุงูุฉ ูููุน ุงููุฑูุจุฉ
            let basePrice = distance * 2 // 2 ุฑูุงู ููู ูููููุชุฑ
            
            // ุชุนุฏูู ุงูุณุนุฑ ุญุณุจ ููุน ุงููุฑูุจุฉ
            if (vehicle.vehicleType?.name?.includes('Large') || vehicle.capacity?.includes('ุทู')) {
              basePrice *= 1.5 // ุฒูุงุฏุฉ 50% ูููุฑูุจุงุช ุงููุจูุฑุฉ
            }

            const finalPrice = Math.round(basePrice)

            await prisma.pricing.create({
              data: {
                fromCityId: fromCity.id,
                toCityId: toCity.id,
                vehicleId: vehicle.id,
                quantity: 1,
                price: finalPrice,
                currency: 'SAR'
              }
            })

            pricingCount++
            console.log(`โ ุชุณุนูุฑ: ${fromCity.nameAr} โ ${toCity.nameAr} (${vehicle.vehicleType?.name || 'ูุฑูุจุฉ'}) = ${finalPrice} ุฑูุงู`)
          }
        }
      }
    }

    console.log(`๐ ุชู ุฅูุดุงุก ${pricingCount} ุณุนุฑ ุฃุณุงุณู ุจูุฌุงุญ!`)

  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุฅูุดุงุก ุงูุชุณุนูุฑ:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// ุฏุงูุฉ ุญุณุงุจ ุงููุณุงูุฉ ุจูู ููุทุชูู (Haversine formula)
function calculateDistance(lat1, lon1, lat2, lon2) {
  const R = 6371 // ูุตู ูุทุฑ ุงูุฃุฑุถ ุจุงููููููุชุฑ
  const dLat = deg2rad(lat2 - lat1)
  const dLon = deg2rad(lon2 - lon1)
  const a = 
    Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * 
    Math.sin(dLon/2) * Math.sin(dLon/2)
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a))
  const distance = R * c
  return Math.round(distance)
}

function deg2rad(deg) {
  return deg * (Math.PI/180)
}

// ุชุดุบูู ุงูุณูุฑูุจุช
seedBasicPricing()
  .then(() => {
    console.log('โจ ุงูุชูุช ุนูููุฉ ุฅูุดุงุก ุงูุชุณุนูุฑ ุจูุฌุงุญ!')
    process.exit(0)
  })
  .catch((error) => {
    console.error('๐ฅ ูุดูุช ุนูููุฉ ุฅูุดุงุก ุงูุชุณุนูุฑ:', error)
    process.exit(1)
  })
